/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Don't edit this file!  It is auto-generated by frameworks/rs/api/gen_runtime.

package android.renderscript.cts;

import android.renderscript.Allocation;
import android.renderscript.RSRuntimeException;
import android.renderscript.Element;

public class TestRemquo extends RSBaseCompute {

    private ScriptC_TestRemquo script;
    private ScriptC_TestRemquoRelaxed scriptRelaxed;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        script = new ScriptC_TestRemquo(mRS);
        scriptRelaxed = new ScriptC_TestRemquoRelaxed(mRS);
    }

    public class ArgumentsFloatFloatIntFloat {
        public float inB;
        public float inC;
        public int outD;
        public float out;
    }

    private void checkRemquoFloatFloatIntFloat() {
        Allocation inB = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0x118af9b82db63b13l, false);
        Allocation inC = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 0x118af9b82db63b14l, false);
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 1), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 1), INPUTSIZE);
            script.set_gAllocInC(inC);
            script.set_gAllocOutD(outD);
            script.forEach_testRemquoFloatFloatIntFloat(inB, out);
            verifyResultsRemquoFloatFloatIntFloat(inB, inC, outD, out, false);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloatFloatIntFloat: " + e.toString());
        }
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 1), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 1), INPUTSIZE);
            scriptRelaxed.set_gAllocInC(inC);
            scriptRelaxed.set_gAllocOutD(outD);
            scriptRelaxed.forEach_testRemquoFloatFloatIntFloat(inB, out);
            verifyResultsRemquoFloatFloatIntFloat(inB, inC, outD, out, true);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloatFloatIntFloat: " + e.toString());
        }
    }

    private void verifyResultsRemquoFloatFloatIntFloat(Allocation inB, Allocation inC, Allocation outD, Allocation out, boolean relaxed) {
        float[] arrayInB = new float[INPUTSIZE * 1];
        inB.copyTo(arrayInB);
        float[] arrayInC = new float[INPUTSIZE * 1];
        inC.copyTo(arrayInC);
        int[] arrayOutD = new int[INPUTSIZE * 1];
        outD.copyTo(arrayOutD);
        float[] arrayOut = new float[INPUTSIZE * 1];
        out.copyTo(arrayOut);
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 1 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatIntFloat args = new ArgumentsFloatFloatIntFloat();
                args.inB = arrayInB[i];
                args.inC = arrayInC[i];
                // Extract the outputs.
                args.outD = arrayOutD[i * 1 + j];
                args.out = arrayOut[i * 1 + j];
                // Ask the CoreMathVerifier to validate.
                Target target = new Target(relaxed);
                String errorMessage = CoreMathVerifier.verifyRemquo(args, target);
                boolean valid = errorMessage == null;
                if (!valid) {
                    StringBuilder message = new StringBuilder();
                    message.append("Input inB: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inB, Float.floatToRawIntBits(args.inB), args.inB));
                    message.append("\n");
                    message.append("Input inC: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inC, Float.floatToRawIntBits(args.inC), args.inC));
                    message.append("\n");
                    message.append("Output outD: ");
                    message.append(String.format("%d", args.outD));
                    message.append("\n");
                    message.append("Output out: ");
                    message.append(Float.toString(args.out));
                    message.append("\n");
                    message.append(errorMessage);
                    assertTrue("Incorrect output for checkRemquoFloatFloatIntFloat" +
                            (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), valid);
                }
            }
        }
    }

    private void checkRemquoFloat2Float2Int2Float2() {
        Allocation inB = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 0x9b98a1a6b125f903l, false);
        Allocation inC = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 0x9b98a1a6b125f904l, false);
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 2), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 2), INPUTSIZE);
            script.set_gAllocInC(inC);
            script.set_gAllocOutD(outD);
            script.forEach_testRemquoFloat2Float2Int2Float2(inB, out);
            verifyResultsRemquoFloat2Float2Int2Float2(inB, inC, outD, out, false);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloat2Float2Int2Float2: " + e.toString());
        }
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 2), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 2), INPUTSIZE);
            scriptRelaxed.set_gAllocInC(inC);
            scriptRelaxed.set_gAllocOutD(outD);
            scriptRelaxed.forEach_testRemquoFloat2Float2Int2Float2(inB, out);
            verifyResultsRemquoFloat2Float2Int2Float2(inB, inC, outD, out, true);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloat2Float2Int2Float2: " + e.toString());
        }
    }

    private void verifyResultsRemquoFloat2Float2Int2Float2(Allocation inB, Allocation inC, Allocation outD, Allocation out, boolean relaxed) {
        float[] arrayInB = new float[INPUTSIZE * 2];
        inB.copyTo(arrayInB);
        float[] arrayInC = new float[INPUTSIZE * 2];
        inC.copyTo(arrayInC);
        int[] arrayOutD = new int[INPUTSIZE * 2];
        outD.copyTo(arrayOutD);
        float[] arrayOut = new float[INPUTSIZE * 2];
        out.copyTo(arrayOut);
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 2 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatIntFloat args = new ArgumentsFloatFloatIntFloat();
                args.inB = arrayInB[i * 2 + j];
                args.inC = arrayInC[i * 2 + j];
                // Extract the outputs.
                args.outD = arrayOutD[i * 2 + j];
                args.out = arrayOut[i * 2 + j];
                // Ask the CoreMathVerifier to validate.
                Target target = new Target(relaxed);
                String errorMessage = CoreMathVerifier.verifyRemquo(args, target);
                boolean valid = errorMessage == null;
                if (!valid) {
                    StringBuilder message = new StringBuilder();
                    message.append("Input inB: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inB, Float.floatToRawIntBits(args.inB), args.inB));
                    message.append("\n");
                    message.append("Input inC: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inC, Float.floatToRawIntBits(args.inC), args.inC));
                    message.append("\n");
                    message.append("Output outD: ");
                    message.append(String.format("%d", args.outD));
                    message.append("\n");
                    message.append("Output out: ");
                    message.append(Float.toString(args.out));
                    message.append("\n");
                    message.append(errorMessage);
                    assertTrue("Incorrect output for checkRemquoFloat2Float2Int2Float2" +
                            (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), valid);
                }
            }
        }
    }

    private void checkRemquoFloat3Float3Int3Float3() {
        Allocation inB = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 0xa049a00a6911ca8fl, false);
        Allocation inC = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 0xa049a00a6911ca90l, false);
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 3), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 3), INPUTSIZE);
            script.set_gAllocInC(inC);
            script.set_gAllocOutD(outD);
            script.forEach_testRemquoFloat3Float3Int3Float3(inB, out);
            verifyResultsRemquoFloat3Float3Int3Float3(inB, inC, outD, out, false);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloat3Float3Int3Float3: " + e.toString());
        }
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 3), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 3), INPUTSIZE);
            scriptRelaxed.set_gAllocInC(inC);
            scriptRelaxed.set_gAllocOutD(outD);
            scriptRelaxed.forEach_testRemquoFloat3Float3Int3Float3(inB, out);
            verifyResultsRemquoFloat3Float3Int3Float3(inB, inC, outD, out, true);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloat3Float3Int3Float3: " + e.toString());
        }
    }

    private void verifyResultsRemquoFloat3Float3Int3Float3(Allocation inB, Allocation inC, Allocation outD, Allocation out, boolean relaxed) {
        float[] arrayInB = new float[INPUTSIZE * 4];
        inB.copyTo(arrayInB);
        float[] arrayInC = new float[INPUTSIZE * 4];
        inC.copyTo(arrayInC);
        int[] arrayOutD = new int[INPUTSIZE * 4];
        outD.copyTo(arrayOutD);
        float[] arrayOut = new float[INPUTSIZE * 4];
        out.copyTo(arrayOut);
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 3 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatIntFloat args = new ArgumentsFloatFloatIntFloat();
                args.inB = arrayInB[i * 4 + j];
                args.inC = arrayInC[i * 4 + j];
                // Extract the outputs.
                args.outD = arrayOutD[i * 4 + j];
                args.out = arrayOut[i * 4 + j];
                // Ask the CoreMathVerifier to validate.
                Target target = new Target(relaxed);
                String errorMessage = CoreMathVerifier.verifyRemquo(args, target);
                boolean valid = errorMessage == null;
                if (!valid) {
                    StringBuilder message = new StringBuilder();
                    message.append("Input inB: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inB, Float.floatToRawIntBits(args.inB), args.inB));
                    message.append("\n");
                    message.append("Input inC: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inC, Float.floatToRawIntBits(args.inC), args.inC));
                    message.append("\n");
                    message.append("Output outD: ");
                    message.append(String.format("%d", args.outD));
                    message.append("\n");
                    message.append("Output out: ");
                    message.append(Float.toString(args.out));
                    message.append("\n");
                    message.append(errorMessage);
                    assertTrue("Incorrect output for checkRemquoFloat3Float3Int3Float3" +
                            (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), valid);
                }
            }
        }
    }

    private void checkRemquoFloat4Float4Int4Float4() {
        Allocation inB = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 0xa4fa9e6e20fd9c1bl, false);
        Allocation inC = createRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 0xa4fa9e6e20fd9c1cl, false);
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 4), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 4), INPUTSIZE);
            script.set_gAllocInC(inC);
            script.set_gAllocOutD(outD);
            script.forEach_testRemquoFloat4Float4Int4Float4(inB, out);
            verifyResultsRemquoFloat4Float4Int4Float4(inB, inC, outD, out, false);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloat4Float4Int4Float4: " + e.toString());
        }
        try {
            Allocation outD = Allocation.createSized(mRS, getElement(mRS, Element.DataType.SIGNED_32, 4), INPUTSIZE);
            Allocation out = Allocation.createSized(mRS, getElement(mRS, Element.DataType.FLOAT_32, 4), INPUTSIZE);
            scriptRelaxed.set_gAllocInC(inC);
            scriptRelaxed.set_gAllocOutD(outD);
            scriptRelaxed.forEach_testRemquoFloat4Float4Int4Float4(inB, out);
            verifyResultsRemquoFloat4Float4Int4Float4(inB, inC, outD, out, true);
        } catch (Exception e) {
            throw new RSRuntimeException("RenderScript. Can't invoke forEach_testRemquoFloat4Float4Int4Float4: " + e.toString());
        }
    }

    private void verifyResultsRemquoFloat4Float4Int4Float4(Allocation inB, Allocation inC, Allocation outD, Allocation out, boolean relaxed) {
        float[] arrayInB = new float[INPUTSIZE * 4];
        inB.copyTo(arrayInB);
        float[] arrayInC = new float[INPUTSIZE * 4];
        inC.copyTo(arrayInC);
        int[] arrayOutD = new int[INPUTSIZE * 4];
        outD.copyTo(arrayOutD);
        float[] arrayOut = new float[INPUTSIZE * 4];
        out.copyTo(arrayOut);
        for (int i = 0; i < INPUTSIZE; i++) {
            for (int j = 0; j < 4 ; j++) {
                // Extract the inputs.
                ArgumentsFloatFloatIntFloat args = new ArgumentsFloatFloatIntFloat();
                args.inB = arrayInB[i * 4 + j];
                args.inC = arrayInC[i * 4 + j];
                // Extract the outputs.
                args.outD = arrayOutD[i * 4 + j];
                args.out = arrayOut[i * 4 + j];
                // Ask the CoreMathVerifier to validate.
                Target target = new Target(relaxed);
                String errorMessage = CoreMathVerifier.verifyRemquo(args, target);
                boolean valid = errorMessage == null;
                if (!valid) {
                    StringBuilder message = new StringBuilder();
                    message.append("Input inB: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inB, Float.floatToRawIntBits(args.inB), args.inB));
                    message.append("\n");
                    message.append("Input inC: ");
                    message.append(String.format("%14.8g {%8x} %15a",
                            args.inC, Float.floatToRawIntBits(args.inC), args.inC));
                    message.append("\n");
                    message.append("Output outD: ");
                    message.append(String.format("%d", args.outD));
                    message.append("\n");
                    message.append("Output out: ");
                    message.append(Float.toString(args.out));
                    message.append("\n");
                    message.append(errorMessage);
                    assertTrue("Incorrect output for checkRemquoFloat4Float4Int4Float4" +
                            (relaxed ? "_relaxed" : "") + ":\n" + message.toString(), valid);
                }
            }
        }
    }

    public void testRemquo() {
        checkRemquoFloatFloatIntFloat();
        checkRemquoFloat2Float2Int2Float2();
        checkRemquoFloat3Float3Int3Float3();
        checkRemquoFloat4Float4Int4Float4();
    }
}
